#Initial key: 0001000110
#Final key: 0101011111
#Num cycles to activate: 35

#Primary Inputs
INPUT(START)
INPUT(B0)
INPUT(B1)
INPUT(B2)
INPUT(B3)
INPUT(A0)
INPUT(A1)
INPUT(A2)
INPUT(A3)

#Primary Outputs
OUTPUT(CNTVCO2)
OUTPUT(CNTVCON2)
OUTPUT(READY)
OUTPUT(P0)
OUTPUT(P1)
OUTPUT(P2)
OUTPUT(P3)
OUTPUT(P4)
OUTPUT(P5)
OUTPUT(P6)
OUTPUT(P7)

#Fixed Key Values

#Activation Counter
n_keyinput0 = NOT(keyinput0)
LOW = AND(keyinput0, n_keyinput0)
ACFF0 = DFF(ACM0)
DKA0 = NOT(ACFF0)
ACM0 = MUX(keyinput0, DKA0, LOW)
ACFF1 = DFF(ACM1)
DKA1 = XOR(DKA0, ACFF1)
ACM1 = MUX(keyinput1, DKA1, LOW)
ACFF2 = DFF(ACM2)
DKA2 = AND(ACFF0, ACFF1)
DKA3 = XOR(ACFF2, DKA2)
ACM2 = MUX(keyinput2, DKA3, LOW)
ACFF3 = DFF(ACM3)
DKA4 = AND(DKA2, ACFF2)
DKA5 = XOR(ACFF3, DKA4)
ACM3 = MUX(keyinput3, LOW, DKA5)
ACFF4 = DFF(ACM4)
DKA6 = AND(DKA4, ACFF3)
DKA7 = XOR(ACFF4, DKA6)
ACM4 = MUX(keyinput4, DKA7, LOW)
ACFF5 = DFF(ACM5)
DKA8 = AND(DKA6, ACFF4)
DKA9 = XOR(ACFF5, DKA8)
ACM5 = MUX(keyinput5, DKA9, LOW)
n_ACFF2 = NOT(ACFF2)
n_ACFF3 = NOT(ACFF3)
n_ACFF4 = NOT(ACFF4)
DKA10 = AND(ACFF0, ACFF1, n_ACFF2, n_ACFF3, n_ACFF4, ACFF5)

#Functional Counter
DKA11 = AND(DKA10, DKA16, DKA17)
DKA12 = AND(DKA17, W0)
DKA13 = AND(W0, W1)
DKA14 = XOR(W0, W1)
DKA15 = OR(DKA11, DKA12, DKA13)
W0 = DFF(DKA14)
W1 = DFF(DKA15)
DKA16 = NOT(W0)
DKA17 = NOT(W1)

#Gates
CT2 = DFF(CNTVG3VD)
CT1 = DFF(CNTVG2VD)
CT0 = DFF(CNTVG1VD)
ACVQN3 = DFF(ACVG4VD1)
ACVQN2 = DFF(ACVG3VD1)
ACVQN1 = DFF(ACVG2VD1)
ACVQN0 = DFF(ACVG1VD1)
MRVQN3 = DFF(MRVG4VD)
MRVQN2 = DFF(MRVG3VD)
MRVQN1 = DFF(MRVG2VD)
MRVQN0 = DFF(MRVG1VD)
DKA18 = DFF(AM3)
DKA19 = AND(W0, DKA18)
DKA20 = AND(W1, DKA18)
DKA21 = OR(DKA19, DKA20)
AX3 = XOR(keyinput0, DKA21)
AX2 = DFF(AM2)
AX1 = DFF(AM1)
AX0 = DFF(AM0)
READY = NOT(READYN)
CT1N = NOT(CT1)
CNTVG3VQN = NOT(CT2)
CNTVG2VQN = NOT(CT1)
CNTVCO0 = NOT(CNTVG1VQN)
CNTVCON0 = NOT(CT0)
CNTVG1VQN = NOT(CT0)
CNTVG1VD1 = NOT(READY)
DKA22 = NOT(ADDVG4VSN)
DKA23 = AND(W0, DKA22)
DKA24 = AND(W1, DKA22)
DKA25 = OR(DKA23, DKA24)
S3 = XNOR(keyinput1, DKA25)
CO = NOT(ADDVG4VCN)
S2 = NOT(ADDVG3VSN)
ADDVC3 = NOT(ADDVG3VCN)
S1 = NOT(ADDVG2VSN)
ADDVC2 = NOT(ADDVG2VCN)
ADDVC1 = NOT(ADDVG1VCN)
S0 = NOT(ADDVG1VP)
AD0 = NOT(AD0N)
AD1 = NOT(AD1N)
DKA26 = NOT(AD2N)
DKA27 = AND(W0, DKA26)
DKA28 = AND(W1, DKA26)
DKA29 = OR(DKA27, DKA28)
AD2 = XOR(keyinput2, DKA29)
AD3 = NOT(AD3N)
ACVPCN = NOT(START)
P7 = NOT(ACVQN3)
P6 = NOT(ACVQN2)
P5 = NOT(ACVQN1)
DKA30 = NOT(ACVQN0)
DKA31 = AND(W0, DKA30)
DKA32 = AND(W1, DKA30)
DKA33 = OR(DKA31, DKA32)
P4 = XNOR(keyinput3, DKA33)
SMVG5VS0P = NOT(SMVS0N)
SM3 = NOT(SMVG5VX)
SMVG4VS0P = NOT(SMVS0N)
SM2 = NOT(SMVG4VX)
SMVG3VS0P = NOT(SMVS0N)
SM1 = NOT(SMVG3VX)
SMVG2VS0P = NOT(SMVS0N)
SM0 = NOT(SMVG2VX)
SMVS0N = NOT(ADSH)
MRVSHLDN = NOT(ADSH)
P3 = NOT(MRVQN3)
P2 = NOT(MRVQN2)
P1 = NOT(MRVQN1)
P0 = NOT(MRVQN0)
DKA34 = NOT(BMVS0N)
DKA35 = AND(W0, DKA34)
DKA36 = AND(W1, DKA34)
DKA37 = OR(DKA35, DKA36)
BMVG5VS0P = XOR(keyinput4, DKA37)
BM3 = NOT(BMVG5VX)
BMVG4VS0P = NOT(BMVS0N)
BM2 = NOT(BMVG4VX)
BMVG3VS0P = NOT(BMVS0N)
BM1 = NOT(BMVG3VX)
BMVG2VS0P = NOT(BMVS0N)
BM0 = NOT(BMVG2VX)
BMVS0N = NOT(READYN)
AMVG5VS0P = NOT(AMVS0N)
AM3 = NOT(AMVG5VX)
AMVG4VS0P = NOT(AMVS0N)
AM2 = NOT(AMVG4VX)
AMVG3VS0P = NOT(AMVS0N)
AM1 = NOT(AMVG3VX)
AMVG2VS0P = NOT(AMVS0N)
AM0 = NOT(AMVG2VX)
AMVS0N = NOT(INIT)
ADDVG4VCNVAD4NF = AND(ADDVC3, AD3, P7)
DKA38 = AND(ADDVG4VCNVOR2NF, ADDVG4VCN)
DKA39 = AND(W0, DKA38)
DKA40 = AND(W1, DKA38)
DKA41 = OR(DKA39, DKA40)
ADDVG4VCNVAD3NF = XNOR(keyinput5, DKA41)
ADDVG4VCNVAD2NF = AND(ADDVC3, ADDVG4VCNVOR1NF)
ADDVG4VCNVAD1NF = AND(AD3, P7)
ADDVG3VCNVAD4NF = AND(ADDVC2, AD2, P6)
ADDVG3VCNVAD3NF = AND(ADDVG3VCNVOR2NF, ADDVG3VCN)
ADDVG3VCNVAD2NF = AND(ADDVC2, ADDVG3VCNVOR1NF)
ADDVG3VCNVAD1NF = AND(AD2, P6)
ADDVG2VCNVAD4NF = AND(ADDVC1, AD1, P5)
ADDVG2VCNVAD3NF = AND(ADDVG2VCNVOR2NF, ADDVG2VCN)
ADDVG2VCNVAD2NF = AND(ADDVC1, ADDVG2VCNVOR1NF)
ADDVG2VCNVAD1NF = AND(AD1, P5)
SMVG5VG1VAD2NF = AND(SMVG5VS0P, CO)
SMVG5VG1VAD1NF = AND(SMVS0N, P7)
SMVG4VG1VAD2NF = AND(SMVG4VS0P, S3)
SMVG4VG1VAD1NF = AND(SMVS0N, P6)
SMVG3VG1VAD2NF = AND(SMVG3VS0P, S2)
SMVG3VG1VAD1NF = AND(SMVS0N, P5)
SMVG2VG1VAD2NF = AND(SMVG2VS0P, S1)
SMVG2VG1VAD1NF = AND(SMVS0N, P4)
MRVG4VDVAD2NF = AND(MRVSHLDN, BM3)
MRVG4VDVAD1NF = AND(ADSH, S0)
MRVG3VDVAD2NF = AND(MRVSHLDN, BM2)
MRVG3VDVAD1NF = AND(ADSH, P3)
MRVG2VDVAD2NF = AND(MRVSHLDN, BM1)
MRVG2VDVAD1NF = AND(ADSH, P2)
MRVG1VDVAD2NF = AND(MRVSHLDN, BM0)
MRVG1VDVAD1NF = AND(ADSH, P1)
BMVG5VG1VAD2NF = AND(BMVG5VS0P, B3)
DKA42 = AND(BMVS0N, P3)
DKA43 = AND(W0, DKA42)
DKA44 = AND(W1, DKA42)
DKA45 = OR(DKA43, DKA44)
BMVG5VG1VAD1NF = XNOR(keyinput6, DKA45)
BMVG4VG1VAD2NF = AND(BMVG4VS0P, B2)
BMVG4VG1VAD1NF = AND(BMVS0N, P2)
BMVG3VG1VAD2NF = AND(BMVG3VS0P, B1)
BMVG3VG1VAD1NF = AND(BMVS0N, P1)
BMVG2VG1VAD2NF = AND(BMVG2VS0P, B0)
BMVG2VG1VAD1NF = AND(BMVS0N, P0)
AMVG5VG1VAD2NF = AND(AMVG5VS0P, A3)
AMVG5VG1VAD1NF = AND(AMVS0N, AX3)
AMVG4VG1VAD2NF = AND(AMVG4VS0P, A2)
AMVG4VG1VAD1NF = AND(AMVS0N, AX2)
AMVG3VG1VAD2NF = AND(AMVG3VS0P, A1)
DKA46 = AND(AMVS0N, AX1)
DKA47 = AND(W0, DKA46)
DKA48 = AND(W1, DKA46)
DKA49 = OR(DKA47, DKA48)
AMVG3VG1VAD1NF = XNOR(keyinput7, DKA49)
AMVG2VG1VAD2NF = AND(AMVG2VS0P, A0)
AMVG2VG1VAD1NF = AND(AMVS0N, AX0)
CNTVG3VG2VOR1NF = OR(CT2, CNTVG3VD1)
CNTVG2VG2VOR1NF = OR(CT1, CNTVG2VD1)
CNTVG1VG2VOR1NF = OR(CT0, CNTVG1VD1)
ADDVG4VCNVOR2NF = OR(ADDVC3, AD3, P7)
ADDVG4VCNVOR1NF = OR(AD3, P7)
ADDVG3VCNVOR2NF = OR(ADDVC2, AD2, P6)
ADDVG3VCNVOR1NF = OR(AD2, P6)
ADDVG2VCNVOR2NF = OR(ADDVC1, AD1, P5)
ADDVG2VCNVOR1NF = OR(AD1, P5)
ADDVG1VPVOR1NF = OR(AD0, P4)
DKA50 = NAND(CT0, CT1N, CT2)
DKA51 = AND(W0, DKA50)
DKA52 = AND(W1, DKA50)
DKA53 = OR(DKA51, DKA52)
READYN = XNOR(keyinput8, DKA53)
CNTVCON2 = NAND(CT2, CNTVCO1)
CNTVG3VZ = NAND(CNTVG3VG2VOR1NF, CNTVG3VZ1)
CNTVG3VZ1 = NAND(CT2, CNTVG3VD1)
CNTVCON1 = NAND(CT1, CNTVCO0)
CNTVG2VZ = NAND(CNTVG2VG2VOR1NF, CNTVG2VZ1)
CNTVG2VZ1 = NAND(CT1, CNTVG2VD1)
CNTVG1VZ = NAND(CNTVG1VG2VOR1NF, CNTVG1VZ1)
CNTVG1VZ1 = NAND(CT0, CNTVG1VD1)
ADDVG1VP = NAND(ADDVG1VPVOR1NF, ADDVG1VCN)
ADDVG1VCN = NAND(AD0, P4)
AD0N = NAND(P0, AX0)
AD1N = NAND(P0, AX1)
AD2N = NAND(P0, AX2)
AD3N = NAND(P0, AX3)
ACVG4VD1 = NAND(ACVPCN, SM3)
ACVG3VD1 = NAND(ACVPCN, SM2)
ACVG2VD1 = NAND(ACVPCN, SM1)
ACVG1VD1 = NAND(ACVPCN, SM0)
ADSH = NOR(READY, INIT)
INIT = NOR(CT0, CT1, CT2)
CNTVCO2 = NOR(CNTVG3VQN, CNTVCON1)
CNTVG3VD = NOR(CNTVG3VZ, START)
CNTVG3VD1 = NOR(READY, CNTVCON1)
CNTVCO1 = NOR(CNTVG2VQN, CNTVCON0)
CNTVG2VD = NOR(CNTVG2VZ, START)
CNTVG2VD1 = NOR(READY, CNTVCON0)
CNTVG1VD = NOR(CNTVG1VZ, START)
ADDVG4VSN = NOR(ADDVG4VCNVAD4NF, ADDVG4VCNVAD3NF)
ADDVG4VCN = NOR(ADDVG4VCNVAD2NF, ADDVG4VCNVAD1NF)
ADDVG3VSN = NOR(ADDVG3VCNVAD4NF, ADDVG3VCNVAD3NF)
ADDVG3VCN = NOR(ADDVG3VCNVAD2NF, ADDVG3VCNVAD1NF)
ADDVG2VSN = NOR(ADDVG2VCNVAD4NF, ADDVG2VCNVAD3NF)
ADDVG2VCN = NOR(ADDVG2VCNVAD2NF, ADDVG2VCNVAD1NF)
SMVG5VX = NOR(SMVG5VG1VAD2NF, SMVG5VG1VAD1NF)
SMVG4VX = NOR(SMVG4VG1VAD2NF, SMVG4VG1VAD1NF)
SMVG3VX = NOR(SMVG3VG1VAD2NF, SMVG3VG1VAD1NF)
SMVG2VX = NOR(SMVG2VG1VAD2NF, SMVG2VG1VAD1NF)
MRVG4VD = NOR(MRVG4VDVAD2NF, MRVG4VDVAD1NF)
MRVG3VD = NOR(MRVG3VDVAD2NF, MRVG3VDVAD1NF)
MRVG2VD = NOR(MRVG2VDVAD2NF, MRVG2VDVAD1NF)
MRVG1VD = NOR(MRVG1VDVAD2NF, MRVG1VDVAD1NF)
BMVG5VX = NOR(BMVG5VG1VAD2NF, BMVG5VG1VAD1NF)
BMVG4VX = NOR(BMVG4VG1VAD2NF, BMVG4VG1VAD1NF)
BMVG3VX = NOR(BMVG3VG1VAD2NF, BMVG3VG1VAD1NF)
BMVG2VX = NOR(BMVG2VG1VAD2NF, BMVG2VG1VAD1NF)
DKA54 = NOR(AMVG5VG1VAD2NF, AMVG5VG1VAD1NF)
DKA55 = AND(W0, DKA54)
DKA56 = AND(W1, DKA54)
DKA57 = OR(DKA55, DKA56)
AMVG5VX = XNOR(keyinput9, DKA57)
AMVG4VX = NOR(AMVG4VG1VAD2NF, AMVG4VG1VAD1NF)
AMVG3VX = NOR(AMVG3VG1VAD2NF, AMVG3VG1VAD1NF)
AMVG2VX = NOR(AMVG2VG1VAD2NF, AMVG2VG1VAD1NF)
